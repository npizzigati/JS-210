1. Odd Numbers
Log all odd numbers from 1 to 99, inclusive, to the console, with each number on a separate line.


#+BEGIN_SRC js :results output
  for (let i = 1; i <= 99; i++) {
    if (i % 2 === 1) console.log(i);
  }
#+END_SRC

#+RESULTS:
#+begin_example
1
3
5
7
9
11
13
15
17
19
21
23
25
27
29
31
33
35
37
39
41
43
45
47
49
51
53
55
57
59
61
63
65
67
69
71
73
75
77
79
81
83
85
87
89
91
93
95
97
99
#+end_example

2. Even numbers: 

#+BEGIN_SRC js :results output
  for (let i = 1; i <= 99; i++) {
    if (i % 2 === 0) console.log(i);
  }
#+END_SRC

#+RESULTS:
#+begin_example
2
4
6
8
10
12
14
16
18
20
22
24
26
28
30
32
34
36
38
40
42
44
46
48
50
52
54
56
58
60
62
64
66
68
70
72
74
76
78
80
82
84
86
88
90
92
94
96
98
#+end_example

3. How Big is the Room
Build a program that asks the user to enter the length and width of a room in meters, and then logs the area of the room to the console in both square meters and square feet.

Note: 1 square meter == 10.7639 square feet

Do not worry about validating the input at this time. Use the readlineSync.prompt method to collect user input.

Example:

Enter the length of the room in meters:
10
Enter the width of the room in meters:
7
The area of the room is 70.00 square meters (753.47 square feet).


#+BEGIN_SRC js
  const rs = require('readline-sync');

  const length = rs.question('Enter the length of the room in meters:\n');
  const width = rs.question('Enter the width of the room in meters:\n');
  const area = length * width;
  console.log(`The area of the room is ${area} square meters (${(area * 10.7639).toFixed(2)} square feet).`);
#+END_SRC

Further Exploration
Modify the program so that it asks the user for the input type (meters or feet). Compute for the area accordingly, and log it and its conversion in parentheses.

#+BEGIN_SRC js
  const rs = require('readline-sync');

  const length = rs.question('Enter the length of the room:\n');
  const width = rs.question('Enter the width of the room:\n');
  const inputType = rs.question('Enter the input type (meters or feet):\n')

  const area = length * width;

  if (inputType === 'meters') {
    console.log(`The area of the room is ${area} square meters (${(area * 10.7639).toFixed(2)} square feet).`);
  } else if (inputType === 'feet') {
    console.log(`The area of the room is ${area} square feet (${(area / 10.7639).toFixed(2)} square meters).`);
  } else {
    console.log('Invalid input type');
  }
#+END_SRC

4. Tip Calculator
Create a simple tip calculator. The program should prompt for a bill amount and a tip rate. The program must compute the tip, and then log both the tip and the total amount of the bill to the console. You can ignore input validation and assume that the user will put in numbers.

Example:

Copy Code
What is the bill? 200
What is the tip percentage? 15

The tip is $30.00
The total is $230.00

#+BEGIN_SRC js
  function calculateTip(billAmount, tipRate) {
    const tip = billAmount * (tipRate / 100);
    console.log(`You should give a tip of ${tip} for a bill amount of ${billAmount}`);
  }

  calculateTip(100, 15);
#+END_SRC

#+RESULTS:
: You should give a tip of 15 for a bill amount of 100
: undefined

5. Sum or product of consecutive integers.

Write a program that asks the user to enter an integer greater than 0, then asks if the user wants to determine the sum or the product of all numbers between 1 and the entered integer, inclusive.

Examples:

Please enter an integer greater than 0: 5
Enter "s" to compute the sum, or "p" to compute the product. s
The sum of the integers between 1 and 5 is 15.

Please enter an integer greater than 0: 6
Enter "s" to compute the sum, or "p" to compute the product. p
The product of the integers between 1 and 6 is 720.


#+BEGIN_SRC js
  function calculateConsecutive(end, operation) {
    let result = 1;
    for (let n = 2; n <= end; n++) {
      (operation === 'sum') ? result += n : result *= n;
    }
    console.log(`The ${operation} of the integers between 1 and ${end} is ${result}`);
  }

  calculateConsecutive(5, 'sum');
  calculateConsecutive(6, 'product');
#+END_SRC

#+RESULTS:
: The sum of the integers between 1 and 5 is 15
: The product of the integers between 1 and 6 is 720
: undefined

Further Exploration
What if the input was an array of integers instead of just a single integer? How would your computeSum and computeProduct functions change? Given that the input is an array, how might you make use of the Array.prototype.reduce() method?

#+BEGIN_SRC js
  function calculateSumOrProduct(arr, operation) {
    const result = arr.reduce((accum, e) => {
      (operation === 'sum') ? accum += e : accum *= e; 
      return accum;
    });
    console.log(`The ${operation} of the elements in the array [${arr.toString()}] is ${result}`);
  }

  calculateSumOrProduct([1, 2, 3, 4, 5], 'sum');
  calculateSumOrProduct([1, 2, 3, 4, 5, 6], 'product');
#+END_SRC

#+RESULTS:
: The sum of the elements in the array [1,2,3,4,5] is 15
: The product of the elements in the array [1,2,3,4,5,6] is 720
: undefined

6. Short Long Short
Write a function that takes two strings as arguments, determines the length of the two strings, and then returns the result of concatenating the shorter string, the longer string, and the shorter string once again. You may assume that the strings are of different lengths.

Examples:

shortLongShort('abc', 'defgh');    // "abcdefghabc"
shortLongShort('abcde', 'fgh');    // "fghabcdefgh"
shortLongShort('', 'xyz');         // "xyz"


#+BEGIN_SRC js
  function shortLongShort(str1, str2) {
    const [shortString, longString] = (str1.length < str2.length) ? [str1, str2] : [str2, str1];
    console.log(shortString + longString + shortString);
  }

  shortLongShort('abc', 'defgh');
  shortLongShort('abcde', 'fgh');
  shortLongShort('', 'xyz');
#+END_SRC

#+RESULTS:
: abcdefghabc
: fghabcdefgh
: xyz
: undefined
